openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    # url: https://virtserver.swaggerhub.com/benhatal/API/1.0.0
    url: http://127.0.0.1:3000
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /register:
    post:
      tags:
        - Auth
      summary: a new user from the client is added to the DB.
      description: A JSON object contains all the details about the new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User item to add
      responses:
        '201':
          description: user created
        '400':
          description: bad input parameters
  /login:
    post:
      tags:
      - Auth
      summary: a user login to the server
      description: A JSON object contains login details.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginBody'
        required: true
      responses:
        '200':
          description: cookies returned and JSON object with success message.
        '401':
          description: Username or Password incorrect
  /logout:
    post:
      tags:
        - Auth
      summary: a user logout from the server.
      description: session reset.
      responses:
        '200':
          description: session reset, and JSON object with success message.
  /recipes/random:
    get:
      tags:
        - Recipes
      summary: Get 3 random recipes 
      description: get three random recipes from external API - spoonacular
      responses:
        '200':
          description: JSON object with details of three random recipes
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/PreviewRecipe'
        '400':
          description: error accured.
  /recipes/query/{query}:
    get:
      tags:
        - Recipes
      summary: a user want to search a recipe
      description: query of recipe, searching with the external API.
      parameters:
        - in: path
          name: query
          description: string of query
          required: true
          schema:
            type: string
        - in: query
          name: parameters
          description: parameters to do filtering.
          schema: 
            $ref: '#/components/schemas/SearchRecipe'
      responses:
        '200':
          description: the details of the recipes returned.
        '400':
          description: error accured.
  /recipes/reviewRecipe/{id}:
    get:
      tags:
        - Recipes
      summary: a full review on the recipe.
      description: recieving full review on the recipe with the external API.
      parameters:
        - in: path
          name: id
          description: string of recipe id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: full details of the recipe returned.
        '400':
          description: error accured.
  /recipes/createRecipe/{name}:
    post:
      tags:
        - Recipes
      summary: a user want to creaete new recipe.
      description: the user fill all the details required to create recipe.
      parameters:
        - in: path
          name: name
          description: string of recipe name
          required: true
          schema:
            type: string
        - in: query
          name: parameters
          description: string of recipe name
          required: true
          schema:
            $ref: '#/components/schemas/ViewRecipe'
      responses:
        '200':
          description: message Recipe Created.
        '400':
          description: error accured.
  /users/favorites:
    post:
      tags:
      - Users
      summary: Add recipe to a user's favorites table.
      operationId: favorites
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: The Recipe successfully saved as favorite.
        '400':
          description: error accured.
    get:
      tags:
      - Users
      summary: get all the favorite recipes as belogn to the user.
      description: favorite recipe of specific user.
      responses:
        '200':
          description: return a list, each object is JSON object as preview details of favorite recipes.
          content: 
            application/json: 
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/PreviewRecipe'
        '400':
          description : error accured.
  /users/myRecipes:
    get:
      tags:
        - Users
      summary: get all the created recipes as belogn to the user.
      description: created recipe of specific user.
      responses:
        '200':
            description: return a list, each object is JSON as preview details of created recipes.
            content: 
              application/json: 
                schema:
                  type: array
                  items:
                      $ref: '#/components/schemas/PreviewRecipe' 
        '400':
            description : error accured
          
  /users/myRecipes/{recipeName}:
    get:
      tags:
        - Users
      summary: Get preview data of specifics recipes
      description: Get from client a list of recipe's ids
      parameters:
        - in: path
          name: recipeName
          description: The name of the recipe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: if there is a match so object Json with Full details of specific recipe from my recipes only,
            else there is an empty json.
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/ViewRecipe'
        '400':
          description: error accured
  /users/lastseen:
    get:
      tags:
        - Users
      summary: get all the 3 last seen recipes as belogn to the user.
      description: 3 last recipes.
      responses:
        '200':
          description: return a list, each object is JSON as preview details of the recipe.
          content: 
            application/json: 
              schema:
                type: array
                items:  
                    $ref: '#/components/schemas/PreviewRecipe' 
        '400':
          description : error accured.
components:
  schemas:
    PreviewRecipe:
      type: object
      properties:
        name:
          type: string
          description: name of the recipe
          example: pizza
        image:
          type: string
          format: URL
          description: URL for the recipe's image
          example: https://GrandmaRecipes.com/pizza-image
        readyInMinutes:
          type: number
          format: float
          description: The amount of time it takes for the entire preparation process
          example: 3.5
        aggregateLikes:
          type: integer
          format: int64
          description: amount of likes the recipes recieved
          example: 30
        vegan:
          type: boolean
          description: vegan or not
          example: false
        vegetarian:
          type: boolean
          description: vegetarian or not
          example: true
        glutenFree:
          type: boolean
          description: Free Gluten Or Not
          example: true
        Watched:
          type: boolean
          description: Indication if the user has already viewed the recipe
          example: true
        Saved:
          type: boolean
          description: Indication if a user Save the recipe to favorites
          example: true
    ViewRecipe:
      allOf:
          - $ref: '#/components/schemas/PreviewRecipe'
          - type: object
            properties:
              ingredients:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: name of the ingredient
                      example: cheese
                    amount:
                      type: string
                      description: amount of the ingredient
                      example: 3
              instructions:
                type: string
              servings:
                type: integer
                format: int64
    SearchRecipe:
      type: object
      description: schema for searching recipe
      properties:
        number:
          type: string
          description: number of recipes to return
          example: 5
        cuisine:
          type: string
          description: cuisine of recipes to return
          example: italian
        diet:
          type: string
          description: diet type of recipes to return
          example: vegetarian
        intolerance:
          type: string
          description: the return recipes must not contain ingredients that
            are not suitable for people with the intolerances entered.
          example: gluten
    User:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters
          example: sergio12
        firstname:
          type: string
          description: user's first name
          example: sergio
        lastname:
          type: string
          description: user's last name
          example: ramos
        country: 
          type: string
          description: user's country
          example: Israel
        password: 
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password contains between 5 to 10 chars, at least one of them is a number and a special char
          example: sergio@124
        email:
          type: string
          format: email
          description: user's email
          example: sergio@gmail.com
    loginBody:
      type: object
      description: details of user who want to login
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters
          example: sergio12
        password: 
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password contains between 5 to 10 chars, at least one of them is a number and a special char
          example: sergio@124